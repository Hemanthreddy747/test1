// import React, { useState, useEffect, useCallback } from "react";
// import { Button, Modal, Form, Row, Col } from "react-bootstrap";
// import { db } from "../firebase/firebase";
// import { ToastContainer, toast } from "react-toastify";
// import {
//   collection,
//   getDocs,
//   addDoc,
//   setDoc,
//   deleteDoc,
//   doc,
//   query,
//   where,
//   writeBatch,
//   serverTimestamp,
//   limit,
//   startAfter,
// } from "firebase/firestore";
// import { getAuth, onAuthStateChanged } from "firebase/auth";
// import imageCompression from "browser-image-compression";
// import "./stock.css";
// import LoaderC from "../utills/loaderC";
// import BatchUpload from "./batchUpload";

// const Stock = () => {
//   // ============= STATE MANAGEMENT =============
//   const [products, setProducts] = useState([]);
//   const [loading, setLoading] = useState(false);
//   const [userUID, setUserUID] = useState(null);
//   const [showAddModal, setShowAddModal] = useState(false);
//   const [showEditModal, setShowEditModal] = useState(false);
//   const [showBatchUploadModal, setShowBatchUploadModal] = useState(false);
//   const [currentProductId, setCurrentProductId] = useState(null);
//   const [searchTerm, setSearchTerm] = useState("");
//   const [sortOption, setSortOption] = useState("");
//   const [formData, setFormData] = useState({
//     productName: "",
//     productDesc: "",
//     brand: "",
//     category: "",
//     bulkPrice: "",
//     retailPrice: "",
//     wholesalePrice: "",
//     stockQty: "",
//     minStock: "",
//     offerValue: "",
//     rank: "",
//     purchasePrice: "",
//     mrp: "",
//     archived: false,
//     productImage: null,
//   });

//   // ============= NOTIFICATION HELPERS =============
//   const notifyError = (message) => toast.error(message);
//   const notifySuccess = (message) => toast.success(message);

//   // ============= AUTH AND INITIAL LOAD =============
//   useEffect(() => {
//     const auth = getAuth();
//     const unsubscribe = onAuthStateChanged(auth, (user) => {
//       if (user) {
//         setUserUID(user.uid);
//         fetchProducts(user.uid);
//       }
//     });

//     return () => unsubscribe();
//   }, []);

//   // ============= DATA FETCHING =============
//   const fetchProducts = async (uid, loadMore = false, forceRefresh = false) => {
//     if (!uid) return;
//     setLoading(true);

//     try {
//       const productsRef = collection(db, "users", uid, "products");
//       const q = query(productsRef, limit(50));
//       const querySnapshot = await getDocs(q);
//       let productsList = querySnapshot.docs.map((doc) => ({
//         id: doc.id,
//         ...doc.data(),
//       }));

//       // Fetch images for products
//       const imagePromises = productsList.map(async (product) => {
//         if (!product.productId) return;

//         // Check local cache first
//         const cachedImages = JSON.parse(
//           localStorage.getItem("productImages") || "{}"
//         );
//         if (cachedImages[product.productId]) {
//           return {
//             productId: product.productId,
//             images: cachedImages[product.productId],
//           };
//         }

//         // If not in cache, fetch from Firestore
//         const imagesRef = collection(db, "users", uid, "productImages");
//         const imagesQuery = query(
//           imagesRef,
//           where("productId", "==", product.productId)
//         );
//         const imagesSnapshot = await getDocs(imagesQuery);
//         const images = imagesSnapshot.docs.map((doc) => doc.data());

//         // Update cache
//         cachedImages[product.productId] = images;
//         localStorage.setItem("productImages", JSON.stringify(cachedImages));

//         return {
//           productId: product.productId,
//           images,
//         };
//       });

//       const imageResults = await Promise.all(imagePromises);
//       const cachedImages = {};
//       imageResults.forEach((result) => {
//         if (result) {
//           cachedImages[result.productId] = result.images;
//         }
//       });

//       // Attach images to products
//       productsList.forEach((product) => {
//         if (product.productId && cachedImages[product.productId]) {
//           product.productImage =
//             cachedImages[product.productId][0]?.productImage;
//         }
//       });

//       setProducts((prev) =>
//         loadMore && !forceRefresh ? [...prev, ...productsList] : productsList
//       );
//     } catch (error) {
//       notifyError("Error fetching products");
//       console.error("Fetch products error:", error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   // ============= PRODUCT OPERATIONS =============
//   const handleAddProduct = async (e) => {
//     e.preventDefault();
//     setLoading(true);

//     try {
//       if (!userUID || !formData.productImage) return;

//       const batch = writeBatch(db);
//       const productId = generateRandomCode(8);

//       const options = {
//         maxSizeMB: 0.5,
//         maxWidthOrHeight: 800,
//         useWebWorker: true,
//       };

//       const compressedFile = await imageCompression(
//         formData.productImage,
//         options
//       );
//       const base64Image = await imageCompression.getDataUrlFromFile(
//         compressedFile
//       );

//       const newProduct = {
//         ...formData,
//         productId,
//         archived: false,
//         createdAt: serverTimestamp(),
//       };
//       delete newProduct.productImage;

//       const productRef = doc(collection(db, "users", userUID, "products"));
//       const imageRef = doc(db, "users", userUID, "productImages", productId);

//       batch.set(productRef, newProduct);
//       batch.set(imageRef, {
//         productId,
//         productImage: base64Image,
//       });

//       await batch.commit();

//       // Update local cache
//       const cachedImages = JSON.parse(
//         localStorage.getItem("productImages") || "{}"
//       );
//       cachedImages[productId] = [
//         {
//           productId,
//           productImage: base64Image,
//         },
//       ];
//       localStorage.setItem("productImages", JSON.stringify(cachedImages));

//       notifySuccess("Product added successfully");
//       resetForm();
//       await fetchProducts(userUID);
//     } catch (error) {
//       notifyError("Error adding product");
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleEditProduct = async (e) => {
//     e.preventDefault();
//     setLoading(true);

//     try {
//       if (!userUID) return;

//       const batch = writeBatch(db);
//       let updatedData = { ...formData };
//       delete updatedData.productImage;

//       // Remove empty fields
//       Object.keys(updatedData).forEach((key) => {
//         if (updatedData[key] === undefined || updatedData[key] === "") {
//           delete updatedData[key];
//         }
//       });

//       updatedData.updatedAt = serverTimestamp();

//       const productRef = doc(
//         db,
//         "users",
//         userUID,
//         "products",
//         currentProductId
//       );
//       batch.set(productRef, updatedData, { merge: true });

//       if (formData.productImage && typeof formData.productImage !== "string") {
//         const options = {
//           maxSizeMB: 0.5,
//           maxWidthOrHeight: 800,
//           useWebWorker: true,
//         };

//         const compressedFile = await imageCompression(
//           formData.productImage,
//           options
//         );
//         const base64Image = await imageCompression.getDataUrlFromFile(
//           compressedFile
//         );

//         const imageRef = doc(
//           db,
//           "users",
//           userUID,
//           "productImages",
//           updatedData.productId
//         );
//         batch.set(imageRef, {
//           productId: updatedData.productId,
//           productImage: base64Image,
//         });

//         // Update local cache
//         const cachedImages = JSON.parse(
//           localStorage.getItem("productImages") || "{}"
//         );
//         cachedImages[updatedData.productId] = [
//           {
//             productId: updatedData.productId,
//             productImage: base64Image,
//           },
//         ];
//         localStorage.setItem("productImages", JSON.stringify(cachedImages));
//       }

//       await batch.commit();
//       notifySuccess("Product updated successfully");
//       resetForm();
//       await fetchProducts(userUID);
//     } catch (error) {
//       notifyError("Error updating product");
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleArchiveProduct = async () => {
//     if (!userUID || !currentProductId) return;

//     setLoading(true);
//     try {
//       const batch = writeBatch(db);
//       const productRef = doc(
//         db,
//         "users",
//         userUID,
//         "products",
//         currentProductId
//       );

//       batch.update(productRef, {
//         archived: !formData.archived,
//         updatedAt: serverTimestamp(),
//       });

//       await batch.commit();
//       notifySuccess(
//         `Product ${formData.archived ? "unarchived" : "archived"} successfully`
//       );
//       resetForm();
//       await fetchProducts(userUID);
//     } catch (error) {
//       notifyError("Error archiving product");
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handlePermanentDelete = async () => {
//     if (!userUID || !currentProductId) return;

//     if (
//       window.confirm(
//         "Are you sure you want to permanently delete this product? This action cannot be undone."
//       )
//     ) {
//       setLoading(true);
//       try {
//         const batch = writeBatch(db);

//         const productRef = doc(
//           db,
//           "users",
//           userUID,
//           "products",
//           currentProductId
//         );
//         batch.delete(productRef);

//         if (formData.productId) {
//           const imageRef = doc(
//             db,
//             "users",
//             userUID,
//             "productImages",
//             formData.productId
//           );
//           batch.delete(imageRef);

//           // Update local cache
//           const cachedImages = JSON.parse(
//             localStorage.getItem("productImages") || "{}"
//           );
//           delete cachedImages[formData.productId];
//           localStorage.setItem("productImages", JSON.stringify(cachedImages));
//         }

//         await batch.commit();
//         notifySuccess("Product deleted successfully");
//         resetForm();
//         await fetchProducts(userUID);
//       } catch (error) {
//         notifyError("Error deleting product");
//       } finally {
//         setLoading(false);
//       }
//     }
//   };

//   // ============= FORM HANDLING =============
//   const handleInputChange = (e) => {
//     const { name, value } = e.target;
//     setFormData({ ...formData, [name]: value });
//   };

//   const handleAddNewClick = () => {
//     resetForm();
//     setShowAddModal(true);
//   };

//   const openEditModal = (product) => {
//     setCurrentProductId(product.id);
//     setFormData({
//       ...product,
//       productImage: product.productImage,
//     });
//     setShowEditModal(true);
//   };

//   const resetForm = () => {
//     setFormData({
//       productName: "",
//       productDesc: "",
//       brand: "",
//       category: "",
//       bulkPrice: "",
//       retailPrice: "",
//       wholesalePrice: "",
//       stockQty: "",
//       minStock: "",
//       offerValue: "",
//       rank: "",
//       purchasePrice: "",
//       mrp: "",
//       archived: false,
//       productImage: null,
//     });

//     setShowAddModal(false);
//     setShowEditModal(false);
//   };

//   // ============= UTILITY FUNCTIONS =============
//   const generateRandomCode = (length) => {
//     const characters =
//       "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
//     return Array.from({ length }, () =>
//       characters.charAt(Math.floor(Math.random() * characters.length))
//     ).join("");
//   };

//   // ============= COMPUTED PROPERTIES =============
//   const activeProducts = products.filter((product) => !product.archived);
//   const archivedProducts = products.filter((product) => product.archived);

//   return (
//     <>
//       {loading && <LoaderC />}
//       <div>
//         <ToastContainer />
//         {/* Search and Add New Section */}
//         <div className="d-flex justify-content-between mb-2 mt-2 ms-1 me-1 gap-1">
//           <input
//             type="text"
//             placeholder="Search by name"
//             value={searchTerm}
//             onChange={(e) => setSearchTerm(e.target.value)}
//             className="form-control w-50"
//           />
//           <select
//             value={sortOption}
//             onChange={(e) => setSortOption(e.target.value)}
//             className="form-control w-25"
//           >
//             <option value="">Sort By</option>
//             <option value="name">Product Name</option>
//             <option value="stockQty">Stock Quantity</option>
//           </select>
//           <Button variant="primary" onClick={handleAddNewClick}>
//             Add New
//           </Button>
//         </div>
//         {/* Add Product Modal */}
//         <Modal show={showAddModal} onHide={() => setShowAddModal(false)}>
//           <Modal.Header closeButton>
//             <Modal.Title>Add Product</Modal.Title>
//           </Modal.Header>
//           <Modal.Body>
//             <Form onSubmit={handleAddProduct}>
//               <Row>
//                 {Object.keys(formData).map((key) =>
//                   key !== "productImage" && key !== "archived" ? (
//                     <Col xs={6} key={key}>
//                       <Form.Group controlId={`form${key}`}>
//                         <Form.Label>
//                           {key
//                             .replace(/([A-Z])/g, " $1")
//                             .replace(/^./, (str) => str.toUpperCase())}
//                         </Form.Label>
//                         <Form.Control
//                           type={
//                             key.includes("Price") || key.includes("Qty")
//                               ? "number"
//                               : "text"
//                           }
//                           name={key}
//                           value={formData[key]}
//                           onChange={handleInputChange}
//                           required
//                         />
//                       </Form.Group>
//                     </Col>
//                   ) : key === "productImage" ? (
//                     <Col xs={12} key={key}>
//                       <Form.Group controlId={`form${key}`}>
//                         <Form.Label>Product Image</Form.Label>
//                         <Form.Control
//                           type="file"
//                           onChange={(e) =>
//                             setFormData({
//                               ...formData,
//                               productImage: e.target.files[0],
//                             })
//                           }
//                           required
//                         />
//                       </Form.Group>
//                     </Col>
//                   ) : null
//                 )}
//               </Row>
//               <Button variant="primary" type="submit" className="mt-3">
//                 Add Product
//               </Button>
//               <Button
//                 variant="secondary"
//                 onClick={() => {
//                   setShowAddModal(false);
//                   setShowBatchUploadModal(true);
//                 }}
//                 className="ms-2 mt-3"
//               >
//                 Batch Upload
//               </Button>
//             </Form>
//           </Modal.Body>
//         </Modal>
//         {/* Batch Upload Modal */}
//         <BatchUpload
//           userUID={userUID}
//           show={showBatchUploadModal}
//           handleClose={() => setShowBatchUploadModal(false)}
//           fetchProducts={(uid, loadMore = false, forceRefresh = false) =>
//             fetchProducts(uid, loadMore, forceRefresh)
//           }
//         />

//         {/* Edit Product Modal */}
//         <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>
//           <Modal.Header closeButton>
//             <Modal.Title>Edit Product</Modal.Title>
//           </Modal.Header>
//           <Modal.Body>
//             <Form onSubmit={handleEditProduct}>
//               <Row>
//                 <Col xs={6}>
//                   <Form.Group controlId="formProductName">
//                     <Form.Label>Product Name</Form.Label>
//                     <Form.Control
//                       type="text"
//                       name="productName"
//                       value={formData.productName || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formProductDesc">
//                     <Form.Label>Product Desc</Form.Label>
//                     <Form.Control
//                       type="text"
//                       name="productDesc"
//                       value={formData.productDesc || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formBrand">
//                     <Form.Label>Brand</Form.Label>
//                     <Form.Control
//                       type="text"
//                       name="brand"
//                       value={formData.brand || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formCategory">
//                     <Form.Label>Category</Form.Label>
//                     <Form.Control
//                       type="text"
//                       name="category"
//                       value={formData.category || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formBulkPrice">
//                     <Form.Label>Bulk Price</Form.Label>
//                     <Form.Control
//                       type="number"
//                       name="bulkPrice"
//                       value={formData.bulkPrice || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formRetailPrice">
//                     <Form.Label>Retail Price</Form.Label>
//                     <Form.Control
//                       type="number"
//                       name="retailPrice"
//                       value={formData.retailPrice || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formWholesalePrice">
//                     <Form.Label>Wholesale Price</Form.Label>
//                     <Form.Control
//                       type="number"
//                       name="wholesalePrice"
//                       value={formData.wholesalePrice || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formStockQty">
//                     <Form.Label>Stock Qty</Form.Label>
//                     <Form.Control
//                       type="number"
//                       name="stockQty"
//                       value={formData.stockQty || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formMinStock">
//                     <Form.Label>Min Stock</Form.Label>
//                     <Form.Control
//                       type="number"
//                       name="minStock"
//                       value={formData.minStock || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formOfferValue">
//                     <Form.Label>Offer Value</Form.Label>
//                     <Form.Control
//                       type="text"
//                       name="offerValue"
//                       value={formData.offerValue || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formRank">
//                     <Form.Label>Rank</Form.Label>
//                     <Form.Control
//                       type="text"
//                       name="rank"
//                       value={formData.rank || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formPurchasePrice">
//                     <Form.Label>Purchase Price</Form.Label>
//                     <Form.Control
//                       type="number"
//                       name="purchasePrice"
//                       value={formData.purchasePrice || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={6}>
//                   <Form.Group controlId="formMrp">
//                     <Form.Label>Mrp</Form.Label>
//                     <Form.Control
//                       type="number"
//                       name="mrp"
//                       value={formData.mrp || ""}
//                       onChange={handleInputChange}
//                       required
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={9}>
//                   <Form.Group controlId="formProductImage">
//                     <Form.Label>Product Image</Form.Label>

//                     <Form.Control
//                       type="file"
//                       onChange={(e) =>
//                         setFormData({
//                           ...formData,
//                           productImage: e.target.files[0],
//                         })
//                       }
//                     />
//                   </Form.Group>
//                 </Col>
//                 <Col xs={3}>
//                   <Form.Group controlId="formProductImage">
//                     {formData.productImage &&
//                       typeof formData.productImage === "string" && (
//                         <div className="mt-2">
//                           <img
//                             src={formData.productImage}
//                             alt="Current product"
//                             style={{ maxWidth: "50px", height: "auto" }}
//                           />
//                         </div>
//                       )}
//                   </Form.Group>
//                 </Col>
//               </Row>
//               <Button variant="primary" type="submit" className="mt-3">
//                 Update Product
//               </Button>
//               <Button
//                 variant="warning"
//                 type="button"
//                 onClick={handleArchiveProduct}
//                 className="ms-4 me-4 mt-3"
//               >
//                 {formData.archived ? "Unarchive" : "Archive"}
//               </Button>
//               <Button
//                 variant="danger"
//                 type="button"
//                 onClick={handlePermanentDelete}
//                 className="me-2 mt-3"
//               >
//                 Delete
//               </Button>
//               <div></div>
//             </Form>
//           </Modal.Body>
//         </Modal>
//         {/* Active Products Grid */}
//         <div className="product-flex-container m-1">
//           {activeProducts.length > 0 ? (
//             activeProducts.map((product) => (
//               <div
//                 className="product-card"
//                 key={product.id}
//                 style={{ backgroundImage: `url(${product.productImage})` }}
//                 onClick={() => openEditModal(product)}
//               >
//                 <div className="details">
//                   <div className="p-2">
//                     <p>
//                       Qty: <span>{product.stockQty}</span>
//                     </p>
//                     <p>
//                       <span>{product.productName}</span>
//                     </p>
//                     <p className="">MRP: {product.mrp}</p>
//                     <p>Bulk Price: {product.wholesalePrice}</p>
//                   </div>
//                 </div>
//               </div>
//             ))
//           ) : (
//             <div
//               className="product-card"
//               style={{
//                 backgroundImage: `url('https://img.freepik.com/free-photo/vertical-banners-sales_23-2150629840.jpg')`,
//               }}
//             >
//               <div className="details">
//                 <div className="p-2">
//                   <p>
//                     Qty: <span>99</span>
//                   </p>
//                   <p>
//                     <span>Sample Product</span>
//                   </p>
//                   <p className="mt-4">MRP: 0.00</p>
//                   <p>Bulk Price: 0.00</p>
//                 </div>
//               </div>
//             </div>
//           )}
//         </div>
//         {/* Archived Products Grid */}
//         {archivedProducts.length > 0 && (
//           <div className="product-flex-container m-1">
//             {archivedProducts.map((product) => (
//               <div
//                 className="product-card archived"
//                 key={product.id}
//                 style={{ backgroundImage: `url(${product.productImage})` }}
//                 onClick={() => openEditModal(product)}
//               >
//                 <div className="details">
//                   <div className="p-2">
//                     <div className="archived-badge">Archived</div>
//                     <p>
//                       QTY: <span>{product.stockQty}</span>
//                     </p>
//                     <p>
//                       <span>{product.productName}</span>
//                     </p>
//                     <p className="mt-4">MRP: {product.mrp}</p>
//                     <p>Wholesale Price: {product.wholesalePrice}</p>
//                   </div>
//                 </div>
//               </div>
//             ))}
//           </div>
//         )}
//         {/* Styles */}
//       </div>
//     </>
//   );
// };

// export default Stock;
// .product-flex-container {
//   display: flex;
//   flex-wrap: wrap;
//   justify-content: flex-start;
//   gap: 7px;
// }

// .product-flex-container p {
//   margin-bottom: 0.5rem;
//   font-weight: 500;
// }

// .product-flex-container .details p span {
//   font-weight: 700;
//   font-size: 18px;
// }

// .product-card {
//   flex: 1 1 120px;
//   width: 120px;
//   max-width: 160px;
//   height: 150px;
//   position: relative;
//   background-size: 100%;
//   background-repeat: no-repeat;
//   border-radius: 8px;
//   overflow: hidden;
//   box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px,
//     rgba(14, 30, 37, 0.32) 0px 2px 16px 0px;
//   display: flex;
//   align-items: flex-start;
//   color: white;
//   cursor: pointer;
// }
// /* 
// .details {
//   height: 100%;
//   color: white;
//   background-color: rgba(58, 62, 70, 0.68);
//   width: 100%;
// } */

// .details {
//   height: 100%;
//   color: white;
//   background-color: rgba(58, 62, 70, 0.68);
//   width: 100%;
//   display: flex;
//   align-items: flex-end; /* This will align content to bottom */
// }

// .archived {
//   opacity: 0.7;
// }

// .archived-badge {
//   background-color: #dc3545;
//   color: white;
//   padding: 2px 6px;
//   border-radius: 4px;
//   font-size: 0.8em;
//   position: absolute;
//   top: 5px;
//   right: 5px;
// }

// .form-label {
//   margin-top: 16px;
//   margin-bottom: 4px !important;
// }

// .modal-body {
//   padding-top: 0px !important;
// }
